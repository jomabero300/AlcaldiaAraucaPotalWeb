// <auto-generated />
using System;
using AlcaldiaAraucaPortalWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlcaldiaAraucaPortalWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211218230501_PqrsProject")]
    partial class PqrsProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Admi")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Acti.Briefcase", b =>
                {
                    b.Property<int>("BriefcaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BriefcaseDescrption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BriefcaseImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BriefcaseText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BriefcaseTitel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BriefcaseUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BriefcaseId");

                    b.ToTable("Briefcases", "Acti");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Acti.BriefcaseSocialNetwork", b =>
                {
                    b.Property<int>("BriefcaseSocialNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BriefcaseId")
                        .HasColumnType("int");

                    b.Property<int>("SocialNetworkId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BriefcaseSocialNetworkId");

                    b.HasIndex("SocialNetworkId");

                    b.HasIndex("BriefcaseId", "BriefcaseSocialNetworkId")
                        .IsUnique()
                        .HasDatabaseName("IX_BriefcaseSocialNetwork_BriefcaseSocialNetworkId");

                    b.ToTable("BriefcaseSocialNetworks", "Acti");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirdDarte")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("DocumentTypeName")
                        .IsUnique()
                        .HasDatabaseName("IX_DocumentType_Name");

                    b.ToTable("DocumentTypes", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("GenderId");

                    b.HasIndex("GenderName")
                        .IsUnique()
                        .HasDatabaseName("IX_Gender_Name");

                    b.ToTable("Genders", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.GroupProductive", b =>
                {
                    b.Property<int>("GroupProductiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupProductiveName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("GroupProductiveId");

                    b.HasIndex("GroupProductiveName")
                        .IsUnique()
                        .HasDatabaseName("IX_GroupProductive_Name");

                    b.HasIndex("StateId");

                    b.ToTable("GroupProductives", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Pqrs", b =>
                {
                    b.Property<int>("PqrsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PqrsCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PqrsDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PqrsMessage")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PqrsId");

                    b.HasIndex("PqrsCategoryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Pqrs", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsAttachments", b =>
                {
                    b.Property<int>("PqrsAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("PqrSend")
                        .HasColumnType("bit");

                    b.Property<string>("PqrsAttachmentsPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PqrsId")
                        .HasColumnType("int");

                    b.HasKey("PqrsAttachmentId");

                    b.HasIndex("PqrsId");

                    b.ToTable("PqrsAttachments", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsCategory", b =>
                {
                    b.Property<int>("PqrsCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PqrsCategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("PqrsCategoryId");

                    b.HasIndex("PqrsCategoryName")
                        .IsUnique()
                        .HasDatabaseName("IX_PqrsCategory_Name");

                    b.HasIndex("StateId");

                    b.ToTable("PqrsCategories", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProject", b =>
                {
                    b.Property<int>("PqrsProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PqrsProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PqrsProjects", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProjectActivitie", b =>
                {
                    b.Property<int>("PqrsProjectActivitieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<int>("PqrsProjectId")
                        .HasColumnType("int");

                    b.HasKey("PqrsProjectActivitieId");

                    b.HasIndex("PqrsProjectId");

                    b.ToTable("PqrsProjectActivities", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProjectProponent", b =>
                {
                    b.Property<int>("PqrsProponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("PqrsProjectId")
                        .HasColumnType("int");

                    b.HasKey("PqrsProponentId");

                    b.HasIndex("PqrsProjectId");

                    b.ToTable("PqrsProponents", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsStrategicLine", b =>
                {
                    b.Property<int>("PqrsStrategicLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PqrsStrategicLineName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("PqrsStrategicLineId");

                    b.HasIndex("PqrsStrategicLineName")
                        .IsUnique()
                        .HasDatabaseName("IX_PqrsStrategicLine_Name");

                    b.ToTable("PqrsStrategicLines", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsTraceability", b =>
                {
                    b.Property<int>("PqrsTraceabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PqrsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PqrsTraceabilityDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PqrsUserStrategicLineId")
                        .HasColumnType("int");

                    b.HasKey("PqrsTraceabilityId");

                    b.HasIndex("PqrsId");

                    b.HasIndex("PqrsUserStrategicLineId");

                    b.ToTable("PqrsTraceabilities", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsUserStrategicLine", b =>
                {
                    b.Property<int>("PqrsUserStrategicLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PqrsStrategicLineId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PqrsUserStrategicLineId");

                    b.HasIndex("PqrsStrategicLineId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("PqrsUserStrategicLines", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProfessionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("ProfessionId");

                    b.HasIndex("ProfessionName")
                        .IsUnique()
                        .HasDatabaseName("IX_Profession_Name");

                    b.HasIndex("StateId");

                    b.ToTable("Professions", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.SocialNetwork", b =>
                {
                    b.Property<int>("SocialNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SocialNetworkName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("SocialNetworkId");

                    b.HasIndex("SocialNetworkName")
                        .IsUnique()
                        .HasDatabaseName("IX_SocialNetwork_Name");

                    b.HasIndex("StateId");

                    b.ToTable("SocialNetworks", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("StateB")
                        .HasColumnType("bit");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("StateType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.HasKey("StateId");

                    b.HasIndex("StateName", "StateType")
                        .IsUnique()
                        .HasDatabaseName("IX_State_Name");

                    b.ToTable("States", "Gene");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", b =>
                {
                    b.Property<int>("AffiliateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("TypeUserId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AffiliateId");

                    b.HasIndex("UserId");

                    b.ToTable("Affiliates", "Proc");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateGroupCommunity", b =>
                {
                    b.Property<int>("AffiliateGroupCommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<int>("GroupCommunityId")
                        .HasColumnType("int");

                    b.HasKey("AffiliateGroupCommunityId");

                    b.HasIndex("GroupCommunityId");

                    b.HasIndex("AffiliateId", "GroupCommunityId")
                        .IsUnique()
                        .HasDatabaseName("IX_AffiliateGroupCommunity_AffiliateGroupCommunity");

                    b.ToTable("AffiliateGroupCommunities", "Proc");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateGroupProductive", b =>
                {
                    b.Property<int>("AffiliateGroupProductiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<int>("GroupProductiveId")
                        .HasColumnType("int");

                    b.HasKey("AffiliateGroupProductiveId");

                    b.HasIndex("GroupProductiveId");

                    b.HasIndex("AffiliateId", "AffiliateGroupProductiveId")
                        .IsUnique()
                        .HasDatabaseName("IX_AffiliateGroupProductive_AffiliateGroupProductive");

                    b.ToTable("AffiliateGroupProductives", "Proc");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateProfession", b =>
                {
                    b.Property<int>("AffiliateProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DocumentoPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("AffiliateProfessionId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("AffiliateId", "AffiliateProfessionId")
                        .IsUnique()
                        .HasDatabaseName("IX_AffiliateProfession_AffiliateProfession");

                    b.ToTable("AffiliateProfessions", "Proc");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateProfessionGallery", b =>
                {
                    b.Property<int>("AffiliateEthnicGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffiliateProfessionGalleryPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("AffiliateProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("AffiliateEthnicGroupId");

                    b.HasIndex("AffiliateProfessionId");

                    b.HasIndex("StateId");

                    b.ToTable("AffiliateProfessionGalleries", "Proc");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateSocialNetwork", b =>
                {
                    b.Property<int>("AffiliateSocialNetworkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AffiliateId")
                        .HasColumnType("int");

                    b.Property<string>("AffiliateSocialNetworURL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SocialNetworkId")
                        .HasColumnType("int");

                    b.HasKey("AffiliateSocialNetworkId");

                    b.HasIndex("SocialNetworkId");

                    b.HasIndex("AffiliateId", "AffiliateSocialNetworkId")
                        .IsUnique()
                        .HasDatabaseName("IX_AffiliateSocialNetwork_AffiliateSocialNetwork");

                    b.ToTable("AffiliateSocialNetworks", "Proc");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.GroupCommunity", b =>
                {
                    b.Property<int>("GroupCommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupCommunityName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("GroupCommunityId");

                    b.HasIndex("GroupCommunityName")
                        .IsUnique()
                        .HasDatabaseName("IX_GroupCommunity_Name");

                    b.HasIndex("StateId");

                    b.ToTable("GroupCommunities", "Proc");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Acti.BriefcaseSocialNetwork", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Acti.Briefcase", "Briefcase")
                        .WithMany("BriefcaseSocialNetworks")
                        .HasForeignKey("BriefcaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.SocialNetwork", "SocialNetwork")
                        .WithMany()
                        .HasForeignKey("SocialNetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Briefcase");

                    b.Navigation("SocialNetwork");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.GroupProductive", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Pqrs", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsCategory", "PqrsCategory")
                        .WithMany()
                        .HasForeignKey("PqrsCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PqrsCategory");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsAttachments", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Pqrs", "Pqrs")
                        .WithMany("PqrsAttachments")
                        .HasForeignKey("PqrsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pqrs");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsCategory", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProject", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProjectActivitie", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProject", "PqrsProject")
                        .WithMany()
                        .HasForeignKey("PqrsProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PqrsProject");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProjectProponent", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsProject", "PqrsProject")
                        .WithMany()
                        .HasForeignKey("PqrsProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PqrsProject");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsTraceability", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Pqrs", "Pqrs")
                        .WithMany()
                        .HasForeignKey("PqrsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsUserStrategicLine", "PqrsUserStrategicLine")
                        .WithMany("PqrsTraceabilities")
                        .HasForeignKey("PqrsUserStrategicLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pqrs");

                    b.Navigation("PqrsUserStrategicLine");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsUserStrategicLine", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsStrategicLine", "PqrsStrategicLine")
                        .WithMany()
                        .HasForeignKey("PqrsStrategicLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("PqrsStrategicLine");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Profession", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.SocialNetwork", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateGroupCommunity", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", "Affiliate")
                        .WithMany("GroupCommunities")
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.GroupCommunity", "GroupCommunity")
                        .WithMany()
                        .HasForeignKey("GroupCommunityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("GroupCommunity");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateGroupProductive", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", "Affiliate")
                        .WithMany("GroupProductives")
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.GroupProductive", "GroupProductive")
                        .WithMany()
                        .HasForeignKey("GroupProductiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("GroupProductive");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateProfession", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", "Affiliate")
                        .WithMany("Professions")
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateProfessionGallery", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateProfession", "AffiliateProfession")
                        .WithMany()
                        .HasForeignKey("AffiliateProfessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AffiliateProfession");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.AffiliateSocialNetwork", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", "Affiliate")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.SocialNetwork", "SocialNetwork")
                        .WithMany()
                        .HasForeignKey("SocialNetworkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("SocialNetwork");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.GroupCommunity", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Acti.Briefcase", b =>
                {
                    b.Navigation("BriefcaseSocialNetworks");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.Pqrs", b =>
                {
                    b.Navigation("PqrsAttachments");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Gene.PqrsUserStrategicLine", b =>
                {
                    b.Navigation("PqrsTraceabilities");
                });

            modelBuilder.Entity("AlcaldiaAraucaPortalWeb.Data.Entities.Proc.Affiliate", b =>
                {
                    b.Navigation("GroupCommunities");

                    b.Navigation("GroupProductives");

                    b.Navigation("Professions");

                    b.Navigation("SocialNetworks");
                });
#pragma warning restore 612, 618
        }
    }
}
